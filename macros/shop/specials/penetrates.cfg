#define PENETRATES_DIV_1
3#enddef

#define PENETRATES_DIV_2
4#enddef

#define WEAPON_SPECIAL_PENETRATES
    [dummy]
        id=penetrates
        name=_"penetrates"
        description=_"Penetrates:
If this attack hits, the unit behind the attacked unit receives 1/{PENETRATES_DIV_1} of the weapon's damage, and the unit behind that receives 1/{PENETRATES_DIV_2} damage, regardless of whether they're friendly or their defenses."
    [/dummy]
#enddef

# Using this, you can determine the coordinates on the "opposite side" of a
# central hex, relative to another hex adjacent to it. What this really means
# is illustrated below:
#       __            __            __
#    __/  \__      __/2 \__      __/  \__
#   /  \__/1 \    /  \__/  \    /2 \__/  \    C: central point
#   \__/C \__/    \__/C \__/    \__/C \__/    1: the hex to "mirror"
#   /2 \__/  \    /  \__/  \    /  \__/1 \    2: the result
#   \__/  \__/    \__/1 \__/    \__/  \__/
#      \__/          \__/          \__/
#
# The coordinates of the central point are given in {CENTER_X} and {CENTER_Y},
# and the coordinates of hex 1 in {X} and {Y}. The coordinates of hex 2 are
# then stored in {VAR}, which will have member variables x and y.
#
# Note that this uses the IF macro given earlier on this page.
#define OPPOSITE_SIDE CENTER_X CENTER_Y X Y VAR
    {VARIABLE x_odd {X}}

    {VARIABLE_OP x_odd modulo 2}

    {VARIABLE c_x {CENTER_X}}
    {VARIABLE c_y {CENTER_Y}}
    {VARIABLE s_x {X}}
    {VARIABLE s_y {Y}}

    {VARIABLE result_x {CENTER_X}}
    {VARIABLE result_y {CENTER_Y}}

    {IF_VAR s_x greater_than $c_x (
        [then]
            {VARIABLE_OP result_x add -1}
        [/then]
    )}

    {IF_VAR s_x less_than $c_x (
        [then]
            {VARIABLE_OP result_x add 1}
        [/then]
    )}

    {IF_VAR s_x equals $c_x (
        [then]
            {IF_VAR s_y less_than $c_y (
                [then]
                    {VARIABLE_OP result_y add 1}
                [/then]
            )}

            {IF_VAR s_y greater_than $c_y (
                [then]
                    {VARIABLE_OP result_y add -1}
                [/then]
            )}
        [/then]
    )}

    {IF_VAR x_odd equals 1 (
        [then]
            {IF_VAR s_y equals $c_y (
                [then]
                    {VARIABLE_OP result_y add 1}
                [/then]
            )}
        [/then]

        [else]
            {IF_VAR s_y equals $c_y (
                [then]
                    {VARIABLE_OP result_y add -1}
                [/then]
            )}
        [/else]
    )}
    {VARIABLE {VAR}.x $result_x}
    {VARIABLE {VAR}.y $result_y}

    {CLEAR_VARIABLE c_x}
    {CLEAR_VARIABLE c_y}
    {CLEAR_VARIABLE s_x}
    {CLEAR_VARIABLE s_y}
    {CLEAR_VARIABLE result_x}
    {CLEAR_VARIABLE result_y}
    {CLEAR_VARIABLE x_odd}
#enddef

[event]
    name=attacker hits,cc defender hits
    first_time_only=no

    [filter_attack]
        special=penetrates
    [/filter_attack]

    {OPPOSITE_SIDE $x2 $y2 $x1 $y1 tmp_opposite1}
    {OPPOSITE_SIDE $tmp_opposite1.x $tmp_opposite1.y $x2 $y2 tmp_opposite2}

    [harm_unit]
        [filter]
            x,y=$tmp_opposite1.x,$tmp_opposite1.y
        [/filter]

        alignment=$unit.alignment
        amount="$($weapon.damage / {PENETRATES_DIV_1})"
        damage_type=$weapon.type
    [/harm_unit]

    [harm_unit]
        [filter]
            x,y=$tmp_opposite2.x,$tmp_opposite2.y
        [/filter]

        alignment=$unit.alignment
        amount="$($weapon.damage / {PENETRATES_DIV_2})"
        damage_type=$weapon.type
    [/harm_unit]

    {CLEAR_VARIABLE tmp_opposite1}
    {CLEAR_VARIABLE tmp_opposite2}
[/event]

