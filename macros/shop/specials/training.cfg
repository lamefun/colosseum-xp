#define TRAINING_DMG_UP_BASE
1#enddef

#define TRAINING_DMG_UP_INCREASE
1#enddef

#define TRAINING_MAX_XP_BASE
5#enddef

#define TRAINING_MAX_XP_INCREASE
5#enddef

#define TRAINING_XP_FOR_KILL
5#enddef

#define TRAINING_XP_FOR_USE
1#enddef

#define TRAINING_DESCRIPTION XP MAX_XP NEXT_DMG_UP NEXT_NEXT_DMG_UP NEXT_NEXT_MAX_XP
"Training (XP {XP}/{MAX_XP}):

Next upgrade: +{NEXT_DMG_UP} damage
Next-next upgrade: +"{NEXT_NEXT_DMG_UP}" damage, "{NEXT_NEXT_MAX_XP}" required XP

XP for use without a kill: +{TRAINING_XP_FOR_USE} XP
XP for use with a kill: +{TRAINING_XP_FOR_KILL} XP"#enddef

#define WEAPON_SPECIAL_TRAINING
    [dummy]
        id=training
        name=_"training 0/{TRAINING_MAX_XP_BASE}"
        description=_{TRAINING_DESCRIPTION 0
            {TRAINING_MAX_XP_BASE} 
            {TRAINING_DMG_UP_BASE}
            "$({TRAINING_DMG_UP_BASE} + {TRAINING_DMG_UP_INCREASE})"
            "$({TRAINING_MAX_XP_BASE} + {TRAINING_MAX_XP_INCREASE})"}
    [/dummy]
#enddef

[event]
    name=cc attack
    first_time_only=no

    {VARIABLE unit.variables.training_hit no}
    {VARIABLE second_unit.variables.training_hit no}

    [unstore_unit]
        variable=unit
        find_vacant=no
    [/unstore_unit]

    [unstore_unit]
        variable=second_unit
        find_vacant=no
    [/unstore_unit]
[/event]

[event]
    name=attacker hits,cc defender hits
    first_time_only=no

    [filter_attack]
        special=training
    [/filter_attack]

    {VARIABLE unit.variables.training_hit yes}
    {VARIABLE unit.variables.training_weapon $weapon.name}
    {VARIABLE unit.variables.training_weapon_description $weapon.description}

    [unstore_unit]
        variable=unit
        find_vacant=no
    [/unstore_unit]
[/event]

[event]
    name=cc attack_end
    first_time_only=no

    [filter]
        [filter_wml]
            [variables]
                training_hit=yes
            [/variables]
        [/filter_wml]
    [/filter]

#define TMP_WEAPON_NAME
$unit.variables.training_weapon#enddef

#define TMP_ARRAY
unit.variables.training#enddef

#define TMP_ELEM
unit.variables.training[$tmp_index]#enddef

#define TMP_ATK
unit.attack[$tmp_atk_index]#enddef

#define TMP_SPC
unit.attack[$tmp_atk_index].specials.dummy[$tmp_spc_index]#enddef

#define TMP_ATK_OBJ
unit.modifications.object[$tmp_obj_index].effect[$tmp_eff_index]#enddef

#define TMP_SPC_OBJ
unit.modifications.object[$tmp_obj_index].effect[$tmp_eff_index].specials.dummy[$tmp_eff_spc_index]#enddef

    {CC_ARRAY_HAS tmp_has {TMP_ARRAY} weapon {TMP_WEAPON_NAME}}

    {IF_VAR tmp_has equals no (
        [then]
            [set_variables]
                name=unit.variables.training
                mode=append
                [value]
                    weapon=$unit.variables.training_weapon
                    experience=0
                    max_experience={TRAINING_MAX_XP_BASE}
                    damage_per_level={TRAINING_DMG_UP_BASE}
                [/value]
            [/set_variables]
        [/then]
    )}

    {CC_ARRAY_FIND tmp_index {TMP_ARRAY} weapon {TMP_WEAPON_NAME}}

    {IF_VAR second_unit.hitpoints less_than_equal_to 0 (
        [then]
            {VARIABLE tmp_experience_increase {TRAINING_XP_FOR_KILL}}
        [/then]
        [else]
            {VARIABLE tmp_experience_increase {TRAINING_XP_FOR_USE}}
        [/else]
    )}

    {VARIABLE tmp_new_experience "$(${TMP_ELEM}.experience + $tmp_experience_increase)"}

#define TMP_FIND_ATTACK_AND_SPECIAL
    {CC_ARRAY_FIND tmp_atk_index unit.attack name {TMP_WEAPON_NAME}}
    {CC_ARRAY_FIND tmp_spc_index {TMP_ATK}.specials.dummy id training}

    {FOREACH unit.modifications.object i}
        {FOREACH unit.modifications.object[$i].effect j}
            [if]
                [variable]
                    name=unit.modifications.object[$i].effect[$j].apply_to
                    equals=new_attack
                [/variable]
                [variable]
                    name=unit.modifications.object[$i].effect[$j].name
                    equals={TMP_WEAPON_NAME}
                [/variable]
                [then]
                    {VARIABLE tmp_obj_index $i}
                    {VARIABLE tmp_eff_index $j}
                    {CC_ARRAY_FIND tmp_eff_spc_index unit.modifications.object[$i].effect[$j].specials.dummy id training}
                [/then]
            [/if]
        {NEXT j}
    {NEXT i}
#enddef

#define TMP_CLEAR_FIND_ATTACK_AND_SPECIAL
    {CLEAR_VARIABLE tmp_atk_index}
    {CLEAR_VARIABLE tmp_spc_index}
    {CLEAR_VARIABLE tmp_obj_index}
    {CLEAR_VARIABLE tmp_eff_index}
    {CLEAR_VARIABLE tmp_eff_spc_index}
#enddef

#define TMP_UPDATE_SPECIAL VAR XP MAX_XP NEXT_DMG_UP NEXT_NEXT_DMG_UP NEXT_NEXT_MAX_XP
    [set_variable]
        name={VAR}.name
        value=_"training {XP}/{MAX_XP}"
    [/set_variable]

    [set_variable]
        name={VAR}.description
        value=_{TRAINING_DESCRIPTION {XP} {MAX_XP} {NEXT_DMG_UP} {NEXT_NEXT_DMG_UP} {NEXT_NEXT_MAX_XP}}
    [/set_variable]
#enddef

#define TMP_UPDATE_SPECIAL_ALL
    # Updates specials in both attack and object the attack came from, so that
    # damage increase is preserved when the unit levels.

    {TMP_UPDATE_SPECIAL {TMP_SPC} 
        ${TMP_ELEM}.experience
        ${TMP_ELEM}.max_experience
        ${TMP_ELEM}.damage_per_level
        "$(${TMP_ELEM}.damage_per_level + {TRAINING_DMG_UP_INCREASE})"
        "$(${TMP_ELEM}.max_experience + {TRAINING_MAX_XP_INCREASE})"}

    {TMP_UPDATE_SPECIAL {TMP_SPC_OBJ}
        ${TMP_ELEM}.experience
        ${TMP_ELEM}.max_experience
        ${TMP_ELEM}.damage_per_level
        "$(${TMP_ELEM}.damage_per_level + {TRAINING_DMG_UP_INCREASE})"
        "$(${TMP_ELEM}.max_experience + {TRAINING_MAX_XP_INCREASE})"}
#enddef

#define TMP_UPDATE_DMG VAR DMG_INC
    [set_variable]
        name={VAR}.damage
        value="$(${VAR}.damage + {DMG_INC})"
    [/set_variable]
#enddef

#define TMP_UPDATE_DMG_ALL DMG_INC
    # Updates specials in both attack and object the attack came from, so that
    # damage increase is preserved when the unit levels.

    {TMP_UPDATE_DMG {TMP_ATK} {DMG_INC}}
    {TMP_UPDATE_DMG {TMP_ATK_OBJ} {DMG_INC}}
#enddef

    {IF_VAR tmp_new_experience greater_than_equal_to ${TMP_ELEM}.max_experience (
        [then]
            {VARIABLE tmp_old_damage_per_level ${TMP_ELEM}.damage_per_level}

            {VARIABLE {TMP_ELEM}.experience "$($tmp_new_experience - ${TMP_ELEM}.max_experience)"}
            {VARIABLE {TMP_ELEM}.max_experience "$(${TMP_ELEM}.max_experience + {TRAINING_MAX_XP_INCREASE})"}
            {VARIABLE {TMP_ELEM}.damage_per_level "$(${TMP_ELEM}.damage_per_level + {TRAINING_DMG_UP_INCREASE})"}

            {TMP_FIND_ATTACK_AND_SPECIAL}
            {TMP_UPDATE_SPECIAL_ALL}
            {TMP_UPDATE_DMG_ALL $tmp_old_damage_per_level}
            {TMP_CLEAR_FIND_ATTACK_AND_SPECIAL}

            [unstore_unit]
                variable=unit
                find_vacant=no
                text=_"+$tmp_old_damage_per_level '$unit.variables.training_weapon_description' DMG"
                {COLOR_HEAL}
            [/unstore_unit]

            {CLEAR_VARIABLE tmp_old_damage_per_level}
        [/then]
        [else]
            {VARIABLE {TMP_ELEM}.experience $tmp_new_experience}
        
            {TMP_FIND_ATTACK_AND_SPECIAL}
            {TMP_UPDATE_SPECIAL_ALL}
            {TMP_CLEAR_FIND_ATTACK_AND_SPECIAL}

            [unstore_unit]
                variable=unit
                find_vacant=no
                text=_"+$tmp_experience_increase '$unit.variables.training_weapon_description' XP"
                {COLOR_HEAL}
            [/unstore_unit]

            {CLEAR_VARIABLE tmp_atk_index}
            {CLEAR_VARIABLE tmp_spc_index}
        [/else]
    )}

    {CLEAR_VARIABLE tmp_experience_increase}
    {CLEAR_VARIABLE tmp_new_experience}
[/event]
